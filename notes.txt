const API_BASE_URL = 'http://localhost:3000/'; // Update to your actual API base URL

Create the routes/api for the products/items

GET /api/items --- this will get all the items available
GET /api/Items/:item_id --- this will get a certain item with item_id
POST /api/items/ --- this will add a new item, the new items info will be added through the headers and json
PUT /api/items/:item_id --- this will allow the items info to be modified, like price, size, etc.
DELETE /api/items/:item_id --- this will delete an item with item_id


Create the routes/api for the cart

GET  /api/carts/:user_id   --- this will get all the items in the current cart for the user
POST /api/carts/:user_id  --- this will create a cart for the user with user_id,
								a value of -1 for user_id this will create able
								cart not assocaited with a user who has an account
POST  /api/carts/:user_id/items/:item_id  --- this will add a new item to the cart
PUT    /api/carts/:user_id/items/:item_id --- this will allow the user to modify this item that is in the cart, the
												user can modify like the instraction and quantity of the item
GET /api/carts/:user_id/items --- this will get all the items in the cart for the user with user_id


DELETE /api/carts/:user_id/items:item_id --- this will allow the user to remove an item from the cart
DELETE /api/carts/:user_id --- this will delete the cart for user_id
DELETE /api/carts     --- not sure how to do this, I want to to be able to delete a cart, but it might not be associated
							as user. It could be a cart that was created by a user who does not want to create
							an account. I guess I could pass the cart_id in the headers?????



GET  /api/users  --- get all the users
GET  /api/users/:user_id  --- get a specific user with user_id
POST  /api/users/ --- create a new user, user info will be in the headers like,
						name, email, password, etc
PUT  /api/users/:user_id --- this will chaneg suer info for a specific user_id		
							the user info to change will be in the headers
DELETE /api/users/:user_id --- delete a specific user with user_id

Create auth routes/api

POST /api/auth/register --- this will be used to register new users with email, password
POST /api/auth/login --- this will be used to log the user in with the correct email and password, 
                        it will return a JWT that will be used to verify correct user for other routes/endpoints
GET /api/auth/me   -- this will return the current user						



/// schema

CREATE TABLE users(
	id SERIAL PRIMARY KEY,
	username VARCHAR(50) UNIQUE NOT NULL,
	password VARCHAR(255) NOT NULL,
	email VARCHAR(100) UNIQUE NOT NULL,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE items (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  category VARCHAR(50),
  image_url TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE cart(
	id SERIAL PRIMARY KEY,
	user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE cart_item(
	id SERIAL PRIMARY KEY,
	cart_id INTEGER REFERENCES cart(id) ON DELETE CASCADE,
	item_id INTEGER REFERENCES item(id) ON DELETE CASCADE,
	instrcutions TEXT,
	quantity INTEGER,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


Roles
————
user,
employee,
administrator

user — is the customer and they can Register, Login. They can bring a list
		 up of all items in the store, look at individual items, create a cart 
		 for their order, modify a cart with their order by adding items, adding 
		 quantity of items and remove items and complete the cart by purchasing the 
		 products. They can also modify their own user info, like Name, email, 
		 password. Thats really all they can do.

employee — this is an employee. They can login, They can bring a list up of all 
		items in the store, look at individual items. They can look at 
		users/customer cart to fulfill the order and they can mark a cart as 
		complete when the user pays for the items they are purchasing.

administrator — this is an administrator. They can register users, employees and 
		other administrators. They can bring a list up of all items in the store, 
		look at individual items, they can modify items info like price, images, 
		descriptions and name. They can add and delete items also. They can also 
		create and modify carts for user and employees and administrators. They 
		can complete carts and delete carts. They can also modify user info and 
		delete users.



Start debugging with the "Full Stack" compound configuration:
	Press F5 in VS Code
	Select "Full Stack: Frontend + Backend"
	Set breakpoints in your backend code
	Option 2: Using Node.js Inspector



	